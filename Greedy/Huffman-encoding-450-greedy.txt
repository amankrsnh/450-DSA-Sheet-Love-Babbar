// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	    class Node
	    {
	        public:
    	        int data;
    	        Node *left;
    	        Node *right;
    	        Node()
    	        {
    	            left=NULL;
    	            right=NULL;
    	        }
    	        Node(int data)
    	        {
    	            this->data=data;
    	            left=NULL;
    	            right=NULL;
    	        }
	    };
	    static bool comp(Node *a,Node *b)
	    {
	        if(a->data==b->data)
	            return false;
	        return a->data>b->data;
	    }
	    void preorder(Node *root,string s,vector<string> &v)
	    {
	        if(root==NULL)
	            return;
	        if(root->left==NULL && root->right==NULL)
	            v.push_back(s);
	        preorder(root->left,s+'0',v);
	        preorder(root->right,s+'1',v);
	    }
		vector<string> huffmanCodes(string S,vector<int> f,int n)
		{
		    priority_queue<Node*,vector<Node*>,function<bool(Node*, Node*)>> pq(comp);
		    for(int i=0;i<n;++i)
		        pq.push(new Node(f[i]));
		    while(pq.size()!=1)
		    {
		        Node *first=pq.top();
		        pq.pop();
		        Node *second=pq.top();
		        pq.pop();
		        Node *result=new Node(first->data+second->data);
		        result->left=first;
		        result->right=second;
		        pq.push(result);
		    }
		    vector<string> v;
		    preorder(pq.top(),"",v);
		    return v;
		}
};

// { Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
	    string S;
	    cin >> S;
	    int N = S.length();
	    vector<int> f(N);
	    for(int i=0;i<N;i++){
	        cin>>f[i];
	    }
	    Solution ob;
	    vector<string> ans = ob.huffmanCodes(S,f,N);
	    for(auto i: ans)
	    	cout << i << " ";
	    cout << "\n";
    }
	return 0;
}  // } Driver Code Ends